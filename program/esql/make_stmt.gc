/*
 * make stmt
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

EXEC SQL INCLUDE SQLCA;

#define  SUCCESS  0
#define  FAILURE  -1

#define  PRINT_SQL_ERROR(aMsg)                                      \
    {                                                               \
        printf("\n");                                               \
        printf(aMsg);                                               \
        printf("\nSQLCODE : %d\nSQLSTATE : %s\nERROR MSG : %s\n",   \
               sqlca.sqlcode,                                       \
               SQLSTATE,                                            \
               sqlca.sqlerrm.sqlerrmc );                            \
    }

//CREATE TABLE INSERT_DATA_TEST
//(
// SNO NUMBER PRIMARY KEY
//,SNAME VARCHAR(10)
//,USE_AMT NUMBER
//,MOD_DATE TIMESTAMP
//,TEXT_C VARCHAR(100)
//)
//SHARDING BY HASH(SNO)

#define ARRCOUNT 100
#define EXECOUNT 1000

int Connect(char *aHostInfo, char *aUserID, char *sPassword);

int main(int argc, char **argv)
{
    struct timeval startTime, endTime, gepTime;

    EXEC SQL BEGIN DECLARE SECTION;
    char         sSelectSql[128];
    char         conn_name[10];
    EXEC SQL END DECLARE SECTION;
    strcpy( conn_name, "DBCONN1" );

    printf("Connect GOLDILOCKS ...\n");
    if(Connect("DSN=GOLDILOCKS", "sys", "gliese") != SUCCESS)
    {
        goto fail_exit;
    }
        
    //start time
    int i=0;
    
    gettimeofday( &startTime, NULL ); 

    while(1){

        sprintf( sSelectSql, "SELECT %d FROM DUAL WHERE 1=%d", i ,i);

        EXEC SQL AT :conn_name PREPARE SELECT_STMT FROM :sSelectSql;
        //sprintf( sSelectSql, "SELECT %d FROM DUAL WHERE 2=%d", i ,i);
        //EXEC SQL AT :conn_name PREPARE SELECT_STMT FROM :sSelectSql ;
        //sprintf( sSelectSql, "SELECT %d FROM DUAL WHERE 3=%d", i ,i);
        //EXEC SQL AT :conn_name PREPARE SELECT_STMT FROM :sSelectSql ;
        
        //EXEC SQL AT :conn_name EXECUTE  IMME :sSelectSql;
        if(sqlca.sqlcode != 0) {
             PRINT_SQL_ERROR("[ERROR] SQL ERROR -") 
             goto fail_exit; 
        }

        if(i%100 == 0){
            gettimeofday( &endTime, NULL ); //end time

            gepTime.tv_sec = endTime.tv_sec - startTime.tv_sec;
            gepTime.tv_usec = endTime.tv_usec - startTime.tv_usec;

            if ( gepTime.tv_usec < 0 )
            {
            gepTime.tv_sec = gepTime.tv_sec - 1;
            gepTime.tv_usec = gepTime.tv_usec + 1000000;
            }

            printf("number : %d , ellapsed time [%02ld.%02ld] second\n",i, gepTime.tv_sec, gepTime.tv_usec);
            gettimeofday( &startTime, NULL );
        }
        i++;
        //if(sSum==1000){ break;
        //}
    }

    EXEC SQL COMMIT WORK RELEASE;
    if(sqlca.sqlcode != 0)
    {
        PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
        goto fail_exit;
    }

    printf("SUCCESS\n");
    printf("############################\n");

    return 0;

  fail_exit:

    printf("FAILURE\n");
    printf("############################\n\n");

    EXEC SQL ROLLBACK WORK RELEASE;

    return 0;
}

int Connect(char *aHostInfo, char *aUserID, char *sPassword)
{
    EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR  sUid[80];
    VARCHAR  sPwd[20];
    VARCHAR  sConnStr[1024];
    char conn_name[10];
    EXEC SQL END DECLARE SECTION;

    /*----------------------------------------------
      Log on GOLDILOCKS
      ------------------------------------------------*/
    strcpy((char *)sUid.arr, aUserID);
    sUid.len = (short)strlen((char *)sUid.arr);
    strcpy((char *)sPwd.arr, sPassword);
    sPwd.len = (short)strlen((char *)sPwd.arr);
    strcpy((char *)sConnStr.arr, aHostInfo);
    sConnStr.len = (short)strlen((char *)sConnStr.arr);
    strcpy( conn_name, "DBCONN1" );

    /* DB 연결 */
    EXEC SQL CONNECT :sUid IDENTIFIED BY :sPwd AT :conn_name USING :sConnStr;
    if(sqlca.sqlcode != 0)
    {
        goto fail_exit;
    }

    return SUCCESS;

  fail_exit:

    PRINT_SQL_ERROR("[ERROR] Connection Failure!");

    return FAILURE;
}

