/*
 * cyclone_source.gc 
 * dml 작업 수행
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>


EXEC SQL INCLUDE SQLCA;

#define  SUCCESS  0
#define  FAILURE  -1
#define  PRINT_SQL_ERROR(aMsg)                                      \
    {                                                               \
        printf("\n");                                               \
        printf(aMsg);                                               \
        printf("\nSQLCODE : %d\nSQLSTATE : %s\nERROR MSG : %s\n",   \
               sqlca.sqlcode,                                       \
               SQLSTATE,                                            \
               sqlca.sqlerrm.sqlerrmc );                            \
    }

//CREATE TABLE DEDUCTION
//(
// SNO NUMBER PRIMARY KEY
//,SNAME VARCHAR(10)
//,USE_AMT NUMBER
//,MOD_DATE TIMESTAMP
//)
//SHARDING BY RANGE(SNO)

int Connect(char *aHostInfo, char *aUserID, char *sPassword);
int RunProc(int arrCount, int exeCount, int procNo);
int RunReset();

int main(int argc, char **argv)
{
    int arrCount=0;
    int exeCount=0;
    int N = 0;
     
    if(argc == 4){
        arrCount = atoi(argv[1]);
        exeCount = atoi(argv[2]);
        N = atoi(argv[3]);
    }else{
        printf("argument error..\n");
        printf("use >> ./cyclone_source [commit array count] [execution count] [process count]\n");
        exit(0);
    }

    pid_t pid[N]; /* process id */
    int childStatus;
    int i;

    RunReset();
    for (i = 0; i < N; i++)
    {
        pid[i] = fork();

        if (pid[i] == 0)
        {

            //child work area
            printf("Now pid[%d] start work\n",i);

            RunProc(arrCount,exeCount,i*arrCount*1000);

            printf("Now pid[%d] is die\n",i);
            exit(100+i);
        }
        // Create multiple child processes
    }

    for (i = 0; i < N; i++)
    {
        pid_t terminatedChild = wait(&childStatus);

        if (WIFEXITED(childStatus))
        {
            // The child process has termindated normally

            printf("Child %d has terminated with exit status %d\n", terminatedChild, WEXITSTATUS(childStatus));
        }

        else
            printf("Child %d has terminated abnormally\n", terminatedChild);
    }  
    return 0;
}

int RunReset(){

    printf("Connect GOLDILOCKS ...\n");
    if(Connect("DSN=GOLDILOCKS", "test", "test") != SUCCESS)
    {
        goto fail_exit;
    }
    //초기화
    EXEC SQL UPDATE DEDUCTION_C SET USE_AMT=0;
        if(sqlca.sqlcode == SQL_NO_DATA) { printf( "No data.\n" ); }
        else if(sqlca.sqlcode != 0) { PRINT_SQL_ERROR("[ERROR] SQL ERROR -"); goto fail_exit; }

    EXEC SQL COMMIT WORK RELEASE;
    if(sqlca.sqlcode != 0)
    {
        PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
        goto fail_exit;
    }


    printf("SUCCESS\n");
    printf("############################\n");

    return 0;

  fail_exit:

    printf("FAILURE\n");
    printf("############################\n\n");

    EXEC SQL ROLLBACK WORK RELEASE;

    return 0;
}

int RunProc(int arrCount, int exeCount, int procNo){
    //printf("%d, %d, %d \n",arrCount, exeCount, procNo);
    struct timeval startTime, endTime, gepTime;

    EXEC SQL BEGIN DECLARE SECTION;
    int          sNo=0;
    int          cNo=0;
    int          sAmt=0;
    EXEC SQL END DECLARE SECTION;

    printf("Connect GOLDILOCKS ...\n");
    if(Connect("DSN=GOLDILOCKS", "test", "test") != SUCCESS)
    {
        goto fail_exit;
    }

    int i;
    int mi;
    for(mi=0; mi < exeCount; mi++){
        cNo = mi;
        //start time
        gettimeofday( &startTime, NULL );

        for (i = procNo; i < procNo+arrCount; i++){
            sNo = i;
            //printf("%d\n",i);
            EXEC SQL SELECT USE_AMT INTO :sAmt FROM DEDUCTION_C WHERE SNO = :sNo FOR UPDATE;
            if(sqlca.sqlcode == SQL_NO_DATA) { 
                //printf( "No data.\n" ); 
                EXEC SQL INSERT INTO DEDUCTION_C VALUES (:sNo, :cNo , 0, SYSTIMESTAMP);
                if(sqlca.sqlcode != 0) { 
                    PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
                    goto fail_exit; 
                } else if(sqlca.sqlcode == -19068) { mi--; break;}
                //printf( "Insert ok.\n" ); 
            } else if(sqlca.sqlcode == 0) {
                EXEC SQL UPDATE DEDUCTION_C SET (USE_AMT, SNAME, MOD_DATE) = (:sAmt+1, :cNo, SYSTIMESTAMP) WHERE SNO = :sNo;
                if(sqlca.sqlcode != 0) { 
                    PRINT_SQL_ERROR("[ERROR] SQL ERROR -"); 
                    goto fail_exit; 
                } else if(sqlca.sqlcode == -19068) { mi--; break;}
            } else if(sqlca.sqlcode == -19068) { mi--; break;
            } else { 
                PRINT_SQL_ERROR("[ERROR] SQL ERROR -") goto fail_exit; 
            }
        }

        EXEC SQL COMMIT WORK;
        if(sqlca.sqlcode != 0)
        {
            PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
            goto fail_exit;
        } else if(sqlca.sqlcode == -19068) { mi--; break;}

        //end time
        gettimeofday( &endTime, NULL );

        gepTime.tv_sec = endTime.tv_sec - startTime.tv_sec;
        gepTime.tv_usec = endTime.tv_usec - startTime.tv_usec;

        if ( gepTime.tv_usec < 0 )
        {
        gepTime.tv_sec = gepTime.tv_sec - 1;
        gepTime.tv_usec = gepTime.tv_usec + 1000000;
        }

        printf("commit number: %d,ellapsed time [%02ld.%02ld] second\n",cNo, gepTime.tv_sec, gepTime.tv_usec);
    }

    EXEC SQL COMMIT WORK RELEASE;
    if(sqlca.sqlcode != 0)
    {
        PRINT_SQL_ERROR("[ERROR] SQL ERROR -");
        goto fail_exit;
    }

    printf("SUCCESS\n");
    printf("############################\n");

    return 0;

  fail_exit:

    printf("FAILURE\n");
    printf("############################\n\n");

    EXEC SQL ROLLBACK WORK RELEASE;

    return 0;
}

int Connect(char *aHostInfo, char *aUserID, char *sPassword)
{
    EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR  sUid[80];
    VARCHAR  sPwd[20];
    VARCHAR  sConnStr[1024];
    EXEC SQL END DECLARE SECTION;

    /*----------------------------------------------
      Log on GOLDILOCKS
      ------------------------------------------------*/
    strcpy((char *)sUid.arr, aUserID);
    sUid.len = (short)strlen((char *)sUid.arr);
    strcpy((char *)sPwd.arr, sPassword);
    sPwd.len = (short)strlen((char *)sPwd.arr);
    strcpy((char *)sConnStr.arr, aHostInfo);
    sConnStr.len = (short)strlen((char *)sConnStr.arr);

    /* DB 연결 */
    EXEC SQL CONNECT :sUid IDENTIFIED BY :sPwd USING :sConnStr;
    if(sqlca.sqlcode != 0)
    {
        goto fail_exit;
    }

    return SUCCESS;

  fail_exit:

    PRINT_SQL_ERROR("[ERROR] Connection Failure!");

    return FAILURE;
}

